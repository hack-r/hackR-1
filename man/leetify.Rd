% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/leetify.r
\name{leetify}
\alias{leetest}
\alias{leetify}
\title{Leetify}
\usage{
leetify(handle, case.type = "alternating", sub.type = "simple",
  leetness = 0.4, include.unicode = FALSE)
}
\arguments{
\item{handle}{Input string to be l33tified.}

\item{case.type}{String that determines the kind of casing to give the input
handle.  Choices are "lower", "upper", "unchanged", "random", and
"alternating", and do basically exactly what they sound like.}

\item{sub.type}{String that determines the kind of character substitutions}

\item{leetness}{Heuristic between 0 and 1 (inclusive) that determines how
often character substitutions (e.g., \code{a} to \code{@}) will take place.}

\item{include.unicode}{Logical; determines if unicode substitutions should
be allowed.}
}
\value{
A leet hacker handle, for optimal gibson hacking.
}
\description{
Functions for converting boring handles into \code{133+ }{@cKeR} handles.
}
\details{
There is an element of random chance, so re-running the same code can
produce different outputs.  This is controlled to some degree by the
\code{leetness} argument.

\code{leetest()} is just sugar for \code{leetify(leetness=1)}.
}
\examples{

\dontrun{
library(hackR, quietly=TRUE)
leetify("Hadley Wickham")
leetest("Hadley Wickham")
}

}
\seealso{
\code{\link{rleet}, \link{modifies}}
}

